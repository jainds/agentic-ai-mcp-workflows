name: 🔒 Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
    paths:
      - 'requirements.txt'
      - 'requirements.lock'
      - 'pyproject.toml'
      - 'Dockerfile'
  pull_request:
    branches: [ main ]
    paths:
      - 'requirements.txt'
      - 'requirements.lock'
      - 'pyproject.toml'
      - 'Dockerfile'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - quick
          - full
          - dependencies-only
          - code-only

env:
  PYTHON_VERSION: '3.13'

jobs:
  dependency-scan:
    name: 🔍 Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'code-only'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-
            ${{ runner.os }}-pip-
        continue-on-error: true
      
      - name: Install dependencies for scanning
        run: |
          pip install --upgrade pip
          pip install safety pip-audit bandit[toml]
      
      - name: Run Safety check
        id: safety-scan
        run: |
          echo "🔒 Running Safety vulnerability check..."
          safety check --json --output safety-report.json || {
            echo "⚠️ Safety check completed with warnings"
            # Create minimal report if scan fails
            echo '{"report_meta": {"scan_target": "requirements"}, "scanned_packages": [], "affected_packages": [], "ignored_vulnerabilities": [], "remediations": {"vulnerabilities": [], "other": []}}' > safety-report.json
          }
          
          if [[ -f safety-report.json ]]; then
            echo "✅ Safety report generated"
            echo "safety-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Safety report failed"
            echo "safety-success=false" >> $GITHUB_OUTPUT
          fi
          
          # Also run text output for logs
          safety check --short-report || true
        continue-on-error: true
      
      - name: Run pip-audit
        id: pip-audit-scan
        run: |
          echo "🔍 Running pip-audit..."
          pip-audit --desc --output=pip-audit-report.json --format=json || {
            echo "⚠️ pip-audit completed with warnings"
            # Create minimal report if scan fails
            echo '{"dependencies": [], "vulnerabilities": []}' > pip-audit-report.json
          }
          
          if [[ -f pip-audit-report.json ]]; then
            echo "✅ pip-audit report generated"
            echo "pip-audit-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ pip-audit report failed"
            echo "pip-audit-success=false" >> $GITHUB_OUTPUT
          fi
          
          # Also run text output for logs
          pip-audit --desc || true
        continue-on-error: true

      - name: Generate dependency scan summary
        if: always()
        run: |
          echo "## 🔍 Dependency Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Safety results
          if [[ "${{ steps.safety-scan.outputs.safety-success }}" == "true" ]]; then
            echo "✅ **Safety Scan:** Completed" >> $GITHUB_STEP_SUMMARY
            if command -v jq >/dev/null 2>&1 && [[ -f safety-report.json ]]; then
              VULNS=$(jq '.affected_packages | length' safety-report.json 2>/dev/null || echo "unknown")
              echo "   - Vulnerable packages: $VULNS" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ **Safety Scan:** Failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
          
          # pip-audit results
          if [[ "${{ steps.pip-audit-scan.outputs.pip-audit-success }}" == "true" ]]; then
            echo "✅ **pip-audit Scan:** Completed" >> $GITHUB_STEP_SUMMARY
            if command -v jq >/dev/null 2>&1 && [[ -f pip-audit-report.json ]]; then
              VULNS=$(jq '.vulnerabilities | length' pip-audit-report.json 2>/dev/null || echo "unknown")
              echo "   - Vulnerabilities found: $VULNS" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ **pip-audit Scan:** Failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json
          retention-days: 30

  code-security-scan:
    name: 🛡️ Code Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'dependencies-only'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-
            ${{ runner.os }}-pip-
        continue-on-error: true
      
      - name: Install Bandit
        run: pip install bandit[toml]
      
      - name: Run Bandit security scan
        id: bandit-scan
        run: |
          echo "🔒 Running Bandit code security scan..."
          bandit -r . \
            -f json -o bandit-report.json \
            --exclude tests/,test_*,.venv/,build/,dist/ \
            --skip B101,B601 || {
            echo "⚠️ Bandit scan completed with warnings"
            # Create minimal report if scan fails
            echo '{"metrics": {"_totals": {"nosec": 0, "skipped_tests": 0}}, "results": []}' > bandit-report.json
          }
          
          if [[ -f bandit-report.json ]]; then
            echo "✅ Bandit report generated"
            echo "bandit-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Bandit report failed"
            echo "bandit-success=false" >> $GITHUB_OUTPUT
          fi
          
          echo "📊 Bandit Summary:"
          bandit -r . \
            --exclude tests/,test_*,.venv/,build/,dist/ \
            --skip B101,B601 \
            --format txt || true
        continue-on-error: true
      
      - name: Run Semgrep security scan
        id: semgrep-scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >- 
            p/security-audit
            p/secrets
            p/python
        continue-on-error: true

      - name: Generate code scan summary
        if: always()
        run: |
          echo "## 🛡️ Code Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Bandit results
          if [[ "${{ steps.bandit-scan.outputs.bandit-success }}" == "true" ]]; then
            echo "✅ **Bandit Scan:** Completed" >> $GITHUB_STEP_SUMMARY
            if command -v jq >/dev/null 2>&1 && [[ -f bandit-report.json ]]; then
              ISSUES=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "unknown")
              echo "   - Security issues found: $ISSUES" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ **Bandit Scan:** Failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Semgrep results - check if action succeeded
          if [[ "${{ steps.semgrep-scan.outcome }}" == "success" ]]; then
            echo "✅ **Semgrep Scan:** Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Semgrep Scan:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload code scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-scan-results
          path: |
            bandit-report.json
          retention-days: 30

  docker-security-scan:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image for scanning
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: insurance-ai-poc:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true
      
      - name: Verify image for scanning
        id: verify-image
        run: |
          if docker image inspect "insurance-ai-poc:security-scan" >/dev/null 2>&1; then
            echo "✅ Image verified and ready for scanning"
            echo "image-ready=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Image not found or not accessible"
            echo "image-ready=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Trivy vulnerability scanner on Docker image
        id: trivy-image-scan
        if: steps.verify-image.outputs.image-ready == 'true'
        run: |
          echo "🔍 Running Trivy scan on Docker image..."
          
          # Install Trivy if not available
          if ! command -v trivy >/dev/null 2>&1; then
            echo "📦 Installing Trivy..."
            wget -qO- https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux-64bit.tar.gz | tar xz
            sudo mv trivy /usr/local/bin/
          fi
          
          trivy image \
            --format sarif \
            --output trivy-results.sarif \
            --severity HIGH,CRITICAL \
            --no-progress \
            insurance-ai-poc:security-scan || {
            echo "⚠️ Trivy image scan failed, creating minimal SARIF file"
            
            cat > trivy-results.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "version": "Unknown",
                    "informationUri": "https://github.com/aquasecurity/trivy"
                  }
                },
                "results": [
                  {
                    "ruleId": "DOCKER_SCAN_FAILED",
                    "message": {
                      "text": "Docker image security scan failed - manual review required"
                    },
                    "level": "warning",
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Dockerfile"
                          },
                          "region": {
                            "startLine": 1
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          }
          
          if [[ -f trivy-results.sarif ]]; then
            echo "✅ Docker image SARIF created"
            echo "image-scan-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to create Docker image SARIF"
            echo "image-scan-success=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Run Trivy filesystem scan
        id: trivy-fs-scan
        run: |
          echo "🔍 Running Trivy filesystem scan..."
          
          # Install Trivy if not available
          if ! command -v trivy >/dev/null 2>&1; then
            echo "📦 Installing Trivy..."
            wget -qO- https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux-64bit.tar.gz | tar xz
            sudo mv trivy /usr/local/bin/
          fi
          
          trivy fs \
            --format sarif \
            --output trivy-fs-results.sarif \
            --severity HIGH,CRITICAL \
            --no-progress \
            . || {
            echo "⚠️ Trivy filesystem scan failed, creating minimal SARIF file"
            
            cat > trivy-fs-results.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "version": "Unknown",
                    "informationUri": "https://github.com/aquasecurity/trivy"
                  }
                },
                "results": [
                  {
                    "ruleId": "FS_SCAN_FAILED",
                    "message": {
                      "text": "Filesystem security scan failed - manual review required"
                    },
                    "level": "warning",
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "."
                          },
                          "region": {
                            "startLine": 1
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          }
          
          if [[ -f trivy-fs-results.sarif ]]; then
            echo "✅ Filesystem SARIF created"
            echo "fs-scan-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to create filesystem SARIF"
            echo "fs-scan-success=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Create fallback SARIF files if needed
        if: always()
        run: |
          # Ensure both SARIF files exist
          if [[ ! -f trivy-results.sarif ]]; then
            echo "🔧 Creating fallback Docker image SARIF"
            cat > trivy-results.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "version": "Unknown",
                    "informationUri": "https://github.com/aquasecurity/trivy"
                  }
                },
                "results": [
                  {
                    "ruleId": "NO_DOCKER_SCAN",
                    "message": {
                      "text": "Docker image scan could not be performed"
                    },
                    "level": "note",
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Dockerfile"
                          },
                          "region": {
                            "startLine": 1
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          fi
          
          if [[ ! -f trivy-fs-results.sarif ]]; then
            echo "🔧 Creating fallback filesystem SARIF"
            cat > trivy-fs-results.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "version": "Unknown",
                    "informationUri": "https://github.com/aquasecurity/trivy"
                  }
                },
                "results": [
                  {
                    "ruleId": "NO_FS_SCAN",
                    "message": {
                      "text": "Filesystem scan could not be performed"
                    },
                    "level": "note",
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "."
                          },
                          "region": {
                            "startLine": 1
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          fi

      - name: Generate Docker scan summary
        if: always()
        run: |
          echo "## 🐳 Docker Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Image build status
          if [[ "${{ steps.verify-image.outputs.image-ready }}" == "true" ]]; then
            echo "✅ **Docker Image:** Built successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Image:** Build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Image scan status
          if [[ "${{ steps.trivy-image-scan.outputs.image-scan-success }}" == "true" ]]; then
            echo "✅ **Image Scan:** Completed" >> $GITHUB_STEP_SUMMARY
            if command -v jq >/dev/null 2>&1 && [[ -f trivy-results.sarif ]]; then
              RESULTS=$(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "unknown")
              echo "   - Vulnerabilities found: $RESULTS" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ **Image Scan:** Failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Filesystem scan status
          if [[ "${{ steps.trivy-fs-scan.outputs.fs-scan-success }}" == "true" ]]; then
            echo "✅ **Filesystem Scan:** Completed" >> $GITHUB_STEP_SUMMARY
            if command -v jq >/dev/null 2>&1 && [[ -f trivy-fs-results.sarif ]]; then
              RESULTS=$(jq '.runs[0].results | length' trivy-fs-results.sarif 2>/dev/null || echo "unknown")
              echo "   - Issues found: $RESULTS" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ **Filesystem Scan:** Failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            trivy-results.sarif
            trivy-fs-results.sarif
        continue-on-error: true
      
      - name: Upload Docker scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-scan-results
          path: |
            trivy-results.sarif
            trivy-fs-results.sarif
          retention-days: 30

  license-scan:
    name: 📜 License Compliance Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-
            ${{ runner.os }}-pip-
        continue-on-error: true
      
      - name: Install pip-licenses
        run: pip install pip-licenses
      
      - name: Install project dependencies
        run: pip install -r requirements.txt
      
      - name: Generate license report
        run: |
          echo "📜 Generating license compliance report..."
          pip-licenses --format=json --output-file=licenses-report.json
          pip-licenses --format=markdown --output-file=licenses-report.md
          
          echo "📊 License Summary:"
          pip-licenses --summary
      
      - name: Upload license scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-scan-results
          path: |
            licenses-report.json
            licenses-report.md
          retention-days: 30

  # ==========================================
  # Security Summary Report
  # ==========================================
  security-summary:
    name: 📊 Security Summary Report
    needs: [dependency-scan, code-security-scan, docker-security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate comprehensive security summary
        run: |
          echo "## 🔒 Comprehensive Security Scan Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event.inputs.scan_type }}" != "" ]]; then
            echo "**Scan Type:** ${{ github.event.inputs.scan_type }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job Status Overview
          echo "### 📋 Scan Job Status" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Dependency scan status
          case "${{ needs.dependency-scan.result }}" in
            "success") echo "| 🔍 Dependency Scan | ✅ Success |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| 🔍 Dependency Scan | ❌ Failed |" >> $GITHUB_STEP_SUMMARY ;;
            "cancelled") echo "| 🔍 Dependency Scan | ⚠️ Cancelled |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 🔍 Dependency Scan | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🔍 Dependency Scan | ❓ Unknown |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Code scan status
          case "${{ needs.code-security-scan.result }}" in
            "success") echo "| 🛡️ Code Security Scan | ✅ Success |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| 🛡️ Code Security Scan | ❌ Failed |" >> $GITHUB_STEP_SUMMARY ;;
            "cancelled") echo "| 🛡️ Code Security Scan | ⚠️ Cancelled |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 🛡️ Code Security Scan | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🛡️ Code Security Scan | ❓ Unknown |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Docker scan status
          case "${{ needs.docker-security-scan.result }}" in
            "success") echo "| 🐳 Docker Security Scan | ✅ Success |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| 🐳 Docker Security Scan | ❌ Failed |" >> $GITHUB_STEP_SUMMARY ;;
            "cancelled") echo "| 🐳 Docker Security Scan | ⚠️ Cancelled |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 🐳 Docker Security Scan | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🐳 Docker Security Scan | ❓ Unknown |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall Assessment
          TOTAL_JOBS=0
          SUCCESS_JOBS=0
          
          if [[ "${{ github.event.inputs.scan_type }}" != "code-only" ]]; then
            TOTAL_JOBS=$((TOTAL_JOBS + 1))
            [[ "${{ needs.dependency-scan.result }}" == "success" ]] && SUCCESS_JOBS=$((SUCCESS_JOBS + 1))
          fi
          
          if [[ "${{ github.event.inputs.scan_type }}" != "dependencies-only" ]]; then
            TOTAL_JOBS=$((TOTAL_JOBS + 1))
            [[ "${{ needs.code-security-scan.result }}" == "success" ]] && SUCCESS_JOBS=$((SUCCESS_JOBS + 1))
          fi
          
          if [[ "${{ github.event.inputs.scan_type }}" == "full" || "${{ github.event.inputs.scan_type }}" == "" ]]; then
            TOTAL_JOBS=$((TOTAL_JOBS + 1))
            [[ "${{ needs.docker-security-scan.result }}" == "success" ]] && SUCCESS_JOBS=$((SUCCESS_JOBS + 1))
          fi
          
          echo "### 🎯 Overall Assessment" >> $GITHUB_STEP_SUMMARY
          echo "**Jobs Completed Successfully:** $SUCCESS_JOBS/$TOTAL_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ $SUCCESS_JOBS -eq $TOTAL_JOBS ]]; then
            echo "🎉 **Status:** All security scans completed successfully!" >> $GITHUB_STEP_SUMMARY
          elif [[ $SUCCESS_JOBS -gt 0 ]]; then
            echo "⚠️ **Status:** Some security scans completed with issues. Review the individual scan results." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Security scans encountered significant issues. Manual review required." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Security scan results are available as GitHub Actions artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- \`dependency-scan-results\` - Safety and pip-audit reports" >> $GITHUB_STEP_SUMMARY
          echo "- \`code-scan-results\` - Bandit and Semgrep reports" >> $GITHUB_STEP_SUMMARY
          echo "- \`docker-scan-results\` - Trivy SARIF files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the **Security** tab for uploaded SARIF results" >> $GITHUB_STEP_SUMMARY
          echo "2. Download artifacts for detailed analysis" >> $GITHUB_STEP_SUMMARY
          echo "3. Address any high or critical severity findings" >> $GITHUB_STEP_SUMMARY
          echo "4. Update dependencies and code as needed" >> $GITHUB_STEP_SUMMARY

      - name: Create security report artifact
        run: |
          echo "# Security Scan Report" > security-summary-report.md
          echo "" >> security-summary-report.md
          echo "**Generated:** $(date)" >> security-summary-report.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-summary-report.md
          echo "" >> security-summary-report.md
          
          echo "## Job Results" >> security-summary-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary-report.md
          echo "- Code Security Scan: ${{ needs.code-security-scan.result }}" >> security-summary-report.md
          echo "- Docker Security Scan: ${{ needs.docker-security-scan.result }}" >> security-summary-report.md
          echo "" >> security-summary-report.md
          
          echo "## Recommendations" >> security-summary-report.md
          echo "1. Review all security scan results carefully" >> security-summary-report.md
          echo "2. Prioritize fixing high and critical severity issues" >> security-summary-report.md
          echo "3. Update dependencies to latest secure versions" >> security-summary-report.md
          echo "4. Consider implementing additional security controls" >> security-summary-report.md

      - name: Upload security summary report
        uses: actions/upload-artifact@v4
        with:
          name: security-summary-report
          path: security-summary-report.md
          retention-days: 90 