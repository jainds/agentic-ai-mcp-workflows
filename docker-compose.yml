version: '3.8'

services:
  # Enterprise Mock Services
  claims-service:
    build:
      context: ./services/claims_service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - CLAIMS_SERVICE_PORT=8000
      - CLAIMS_SERVICE_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insurance-network

  user-service:
    build:
      context: ./services/user_service
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    environment:
      - USER_SERVICE_PORT=8000
      - USER_SERVICE_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insurance-network

  policy-service:
    build:
      context: ./services/policy_service
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    environment:
      - POLICY_SERVICE_PORT=8000
      - POLICY_SERVICE_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insurance-network

  analytics-service:
    build:
      context: ./services/analytics_service
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    environment:
      - ANALYTICS_SERVICE_PORT=8000
      - ANALYTICS_SERVICE_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insurance-network

  # Domain Agents
  claims-agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_TYPE: claims
    ports:
      - "9000:8000"
    environment:
      - CLAIMS_AGENT_PORT=8000
      - CLAIMS_API_URL=http://claims-service:8000
      - USER_API_URL=http://user-service:8000
      - DATA_MCP_SERVER_URL=http://data-agent:8001
      - INTEGRATION_MCP_SERVER_URL=http://integration-agent:8001
    depends_on:
      - claims-service
      - user-service
      - data-agent
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - insurance-network

  support-agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_TYPE: support
    ports:
      - "9001:8000"
    environment:
      - SUPPORT_AGENT_PORT=8000
      - USER_API_URL=http://user-service:8000
      - DATA_MCP_SERVER_URL=http://data-agent:8001
    depends_on:
      - user-service
      - data-agent
    networks:
      - insurance-network

  policy-agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_TYPE: policy
    ports:
      - "9002:8000"
    environment:
      - POLICY_AGENT_PORT=8000
      - POLICY_API_URL=http://policy-service:8000
      - DATA_MCP_SERVER_URL=http://data-agent:8001
    depends_on:
      - policy-service
      - data-agent
    networks:
      - insurance-network

  # Technical Agents
  data-agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_TYPE: data
    ports:
      - "9010:8000"
      - "9011:8001"
    environment:
      - DATA_AGENT_PORT=8000
      - DATA_MCP_PORT=8001
      - CLAIMS_API_URL=http://claims-service:8000
      - USER_API_URL=http://user-service:8000
      - POLICY_API_URL=http://policy-service:8000
      - ANALYTICS_API_URL=http://analytics-service:8000
    depends_on:
      - claims-service
      - user-service
      - policy-service
      - analytics-service
    networks:
      - insurance-network

  notification-agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_TYPE: notification
    ports:
      - "9012:8000"
      - "9013:8001"
    environment:
      - NOTIFICATION_AGENT_PORT=8000
      - NOTIFICATION_MCP_PORT=8001
    networks:
      - insurance-network

  integration-agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_TYPE: integration
    ports:
      - "9014:8000"
      - "9015:8001"
    environment:
      - INTEGRATION_AGENT_PORT=8000
      - INTEGRATION_MCP_PORT=8001
    networks:
      - insurance-network

  # UI Components
  streamlit-ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - CLAIMS_AGENT_URL=http://claims-agent:8000
      - SUPPORT_AGENT_URL=http://support-agent:8000
      - POLICY_AGENT_URL=http://policy-agent:8000
      - DATA_AGENT_URL=http://data-agent:8000
      - NOTIFICATION_AGENT_URL=http://notification-agent:8000
      - INTEGRATION_AGENT_URL=http://integration-agent:8000
    depends_on:
      - claims-agent
      - support-agent
      - policy-agent
      - data-agent
      - notification-agent
      - integration-agent
    networks:
      - insurance-network

  agent-registry:
    build:
      context: .
      dockerfile: Dockerfile.registry
    ports:
      - "8502:8502"
    environment:
      - REGISTRY_PORT=8502
    depends_on:
      - claims-agent
      - support-agent
      - policy-agent
      - data-agent
      - notification-agent
      - integration-agent
    networks:
      - insurance-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.40.0
    ports:
      - "9090:9090"
    volumes:
      - ./k8s/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - insurance-network

  grafana:
    image: grafana/grafana:9.3.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./k8s/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./k8s/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - insurance-network

  jaeger:
    image: jaegertracing/all-in-one:1.40
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - insurance-network

  # Message Queue (for async communication)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - insurance-network

  # Database (for persistent storage if needed)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=insurance_ai
      - POSTGRES_USER=insurance
      - POSTGRES_PASSWORD=insurance123
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - insurance-network

  # Load Balancer (for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./k8s/monitoring/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - streamlit-ui
      - agent-registry
      - prometheus
      - grafana
    networks:
      - insurance-network

networks:
  insurance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data:
  grafana-data:
  redis-data:
  postgres-data: 